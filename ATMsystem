import java.util.*;

// AccountHolder Class (previously 'User')
class AccountHolder {
    private String userId;
    private String userPin;
    private double accountBalance;
    private String transactionHistory = "";

    public AccountHolder(String userId, String userPin, double accountBalance) {
        this.userId = userId;
        this.userPin = userPin;
        this.accountBalance = accountBalance;
    }

    public boolean validateCredentials(String userId, String userPin) {
        return this.userId.equals(userId) && this.userPin.equals(userPin);
    }

    public double getAccountBalance() {
        return accountBalance;
    }

    public void deposit(double amount) {
        accountBalance += amount;
        transactionHistory += "Deposited: $" + amount + "\n";
    }

    public boolean withdraw(double amount) {
        if (amount > accountBalance) {
            return false;
        }
        accountBalance -= amount;
        transactionHistory += "Withdrew: $" + amount + "\n";
        return true;
    }

    public void transfer(double amount, AccountHolder recipient) {
        if (amount <= accountBalance) {
            accountBalance -= amount;
            recipient.deposit(amount);
            transactionHistory += "Transferred: $" + amount + " to User ID: " + recipient.userId + "\n";
        } else {
            System.out.println("‚ùå Insufficient balance for transfer.");
        }
    }

    public String getTransactionHistory() {
        return transactionHistory.isEmpty() ? "No transactions yet." : transactionHistory;
    }
}

// ATM System Logic Class
class ATMSystem {
    private Map<String, AccountHolder> users = new HashMap<>();
    private AccountHolder currentUser;
    private Scanner scanner = new Scanner(System.in);

    public ATMSystem() {
        // Predefined Users
        users.put("user1", new AccountHolder("user1", "1234", 5000.00));
        users.put("user2", new AccountHolder("user2", "5678", 3000.00));
    }

    public void start() {
        System.out.println("üè¶ Welcome to the ATM System!");
        System.out.print("Enter User ID: ");
        String userId = scanner.nextLine();
        System.out.print("Enter PIN: ");
        String userPin = scanner.nextLine();

        if (authenticate(userId, userPin)) {
            mainMenu();
        } else {
            System.out.println("‚ùå Invalid User ID or PIN. Exiting...");
        }
    }

    private boolean authenticate(String userId, String userPin) {
        AccountHolder user = users.get(userId);
        if (user != null && user.validateCredentials(userId, userPin)) {
            currentUser = user;
            System.out.println("‚úÖ Login successful!");
            return true;
        }
        return false;
    }

    private void mainMenu() {
        while (true) {
            System.out.println("\n--- ATM Main Menu ---");
            System.out.println("1. Transaction History");
            System.out.println("2. Withdraw");
            System.out.println("3. Deposit");
            System.out.println("4. Transfer");
            System.out.println("5. Quit");
            System.out.print("Choose an option: ");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1 -> viewTransactionHistory();
                case 2 -> withdraw();
                case 3 -> deposit();
                case 4 -> transfer();
                case 5 -> {
                    System.out.println("Thank you for using the ATM. Goodbye!");
                    return;
                }
                default -> System.out.println("Invalid option. Please try again.");
            }
        }
    }

    private void viewTransactionHistory() {
        System.out.println("\n--- Transaction History ---");
        System.out.println(currentUser.getTransactionHistory());
    }

    private void withdraw() {
        System.out.print("Enter amount to withdraw: $");
        double amount = scanner.nextDouble();
        if (currentUser.withdraw(amount)) {
            System.out.println("‚úÖ Withdrawal successful. Current Balance: $" + currentUser.getAccountBalance());
        } else {
            System.out.println("‚ùå Insufficient balance.");
        }
    }

    private void deposit() {
        System.out.print("Enter amount to deposit: $");
        double amount = scanner.nextDouble();
        currentUser.deposit(amount);
        System.out.println("‚úÖ Deposit successful. Current Balance: $" + currentUser.getAccountBalance());
    }

    private void transfer() {
        System.out.print("Enter recipient User ID: ");
        String recipientId = scanner.nextLine();
        AccountHolder recipient = users.get(recipientId);

        if (recipient == null) {
            System.out.println("‚ùå Recipient User ID not found.");
            return;
        }

        System.out.print("Enter amount to transfer: $");
        double amount = scanner.nextDouble();
        if (amount <= currentUser.getAccountBalance()) {
            currentUser.transfer(amount, recipient);
            System.out.println("‚úÖ Transfer successful. Current Balance: $" + currentUser.getAccountBalance());
        } else {
            System.out.println("‚ùå Insufficient balance.");
        }
    }
}

// Main Class
public class ATM {
    public static void main(String[] args) {
        ATMSystem atmSystem = new ATMSystem();
        atmSystem.start();
    }
}
